class Solution {
    public int minDistance(String word1, String word2) {
        if(word1.length() == 0 && word2.length()==0) return 0;
        if(word1.length() == 0 && word2.length()!=0) return word2.length();
        if(word1.length() != 0 && word2.length()==0) return word1.length();    
        int n = word1.length();
        int m = word2.length();
        int[][] dp = new int[n+1][m+1];
        //base case
        for(int i = 0 ;i<=n;i++){
           dp[i][0] = i;
        }
        for(int i = 0 ;i<=m;i++){
           dp[0][i] = i;
        }
        for(int i = 1;i<=n;i++){
            for(int j = 1;j<=m;j++){
                if(word1.charAt(i-1) == word2.charAt(j-1)){
                     dp[i][j] = dp[i-1][j-1];
                }else{
                    //插入
                    int insert = dp[i][j-1]+1;
                    //替换
                    int replace = dp[i-1][j-1]+1;
                    //删除
                    int delete = dp[i-1][j]+1;
                     dp[i][j] = Math.min(Math.min(insert,replace),delete);
                }

            }
        }
        return dp[n][m];
    }
}
//runtime:6 ms
//memory:38.4 MB
