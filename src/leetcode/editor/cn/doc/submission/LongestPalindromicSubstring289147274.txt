class Solution {
    //动态规划
    public String longestPalindrome(String s) {
    int n = s.length();
    String res="";
    boolean[][] dp = new boolean[n][n];
     for(int l=0;l<n;++l){
         for(int i = 0;i+l<n;++i){
             int j = i+l;
             if(l == 0){
                 //单个字符的情况
                dp[i][j] = true;
             }else if(l==1){
                 //临近两个字符是否相等的情况
                 // dp[i][j] = (s.charAt(i) == s.charAt(j));
                dp[i][j] = (s.charAt(i) == s.charAt(j));
             }else{
                 //其他情况
                   dp[i][j] = (s.charAt(i) == s.charAt(j) && dp[i + 1][j - 1]);
              //  dp[i][j] = (s.charAt(i) ==s.charAt(j))&&dp[i+1][j-1];
             }
            //   if (dp[i][j] && l + 1 > ans.length()) {
            //         ans = s.substring(i, i + l + 1);
            //     }

             if(dp[i][j]&&l+1>res.length()){
                res= s.substring(i,i+l+1);
             }
         }
     }
    return res;
   }
}
//runtime:372 ms
//memory:44.2 MB
