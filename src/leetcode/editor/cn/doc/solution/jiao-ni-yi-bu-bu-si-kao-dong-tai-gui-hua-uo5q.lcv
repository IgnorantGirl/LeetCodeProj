# 视频讲解

[【基础算法精讲 19】](https://www.bilibili.com/video/BV1TM4y1o7ug/)。如果这个视频对你有帮助，欢迎一键三连！

> APP 用户需要分享到 wx 打开。

# 一 · 递归搜索 + 保存计算结果 = 记忆化搜索

* [sol1-Python3]

```py
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        n, m = len(s), len(t)
        @cache
        def dfs(i, j):
            if i < 0: return j + 1
            if j < 0: return i + 1
            if s[i] == t[j]: return dfs(i - 1, j - 1)
            return min(dfs(i - 1, j), dfs(i, j - 1), dfs(i - 1, j - 1)) + 1
        return dfs(n - 1, m - 1)
```

* [sol1-Java]

```java
class Solution {
    private char[] s, t;
    private int[][] memo;

    public int minDistance(String text1, String text2) {
        s = text1.toCharArray();
        t = text2.toCharArray();
        int n = s.length, m = t.length;
        memo = new int[n][m];
        for (int i = 0; i < n; i++)
            Arrays.fill(memo[i], -1); // -1 表示还没有计算过
        return dfs(n - 1, m - 1);
    }

    private int dfs(int i, int j) {
        if (i < 0) return j + 1;
        if (j < 0) return i + 1;
        if (memo[i][j] != -1) return memo[i][j];
        if (s[i] == t[j]) return memo[i][j] = dfs(i - 1, j - 1);
        return memo[i][j] = Math.min(Math.min(dfs(i - 1, j), dfs(i, j - 1)), dfs(i - 1, j - 1)) + 1;
    }
}
```

* [sol1-C++]

```cpp
class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.length(), m = t.length(), memo[n + 1][m + 1];
        memset(memo, -1, sizeof(memo)); // -1 表示还没有计算过
        function<int(int, int)> dfs = [&](int i, int j) -> int {
            if (i < 0) return j + 1;
            if (j < 0) return i + 1;
            int &res = memo[i][j];
            if (res != -1) return res;
            if (s[i] == t[j]) return res = dfs(i - 1, j - 1);
            return res = min(min(dfs(i - 1, j), dfs(i, j - 1)), dfs(i - 1, j - 1)) + 1;
        };
        return dfs(n - 1, m - 1);
    }
};
```

* [sol1-Go]

```go
func minDistance(s, t string) int {
    n, m := len(s), len(t)
    memo := make([][]int, n)
    for i := range memo {
        memo[i] = make([]int, m)
        for j := range memo[i] {
            memo[i][j] = -1 // -1 表示还没有计算过
        }
    }
    var dfs func(int, int) int
    dfs = func(i, j int) (res int) {
        if i < 0 {
            return j + 1
        }
        if j < 0 {
            return i + 1
        }
        p := &memo[i][j]
        if *p != -1 {
            return *p
        }
        defer func() { *p = res }()
        if s[i] == t[j] {
            return dfs(i-1, j-1)
        }
        return min(min(dfs(i-1, j), dfs(i, j-1)), dfs(i-1, j-1)) + 1
    }
    return dfs(n-1, m-1)
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。
- 空间复杂度：$O(nm)$。

# 二 · 1:1 翻译成递推

* [sol2-Python3]

```py
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        n, m = len(s), len(t)
        f = [[0] * (m + 1) for _ in range(n + 1)]
        f[0] = list(range(m + 1))
        for i, x in enumerate(s):
            f[i + 1][0] = i + 1
            for j, y in enumerate(t):
                f[i + 1][j + 1] = f[i][j] if x == y else \
                                  min(f[i][j + 1], f[i + 1][j], f[i][j]) + 1
        return f[n][m]
```

* [sol2-Java]

```java
class Solution {
    public int minDistance(String text1, String text2) {
        char[] s = text1.toCharArray(), t = text2.toCharArray();
        int n = s.length, m = t.length;
        int[][] f = new int[n + 1][m + 1];
        for (int j = 1; j <= m; ++j) f[0][j] = j;
        for (int i = 0; i < n; ++i) {
            f[i + 1][0] = i + 1;
            for (int j = 0; j < m; ++j)
                f[i + 1][j + 1] = s[i] == t[j] ? f[i][j] :
                                  Math.min(Math.min(f[i][j + 1], f[i + 1][j]), f[i][j]) + 1;
        }
        return f[n][m];
    }
}
```

* [sol2-C++]

```cpp
class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.length(), m = t.length(), f[n + 1][m + 1];
        for (int j = 0; j <= m; ++j) f[0][j] = j;
        for (int i = 0; i < n; ++i) {
            f[i + 1][0] = i + 1;
            for (int j = 0; j < m; ++j)
                f[i + 1][j + 1] = s[i] == t[j] ? f[i][j] :
                                  min(min(f[i][j + 1], f[i + 1][j]), f[i][j]) + 1;
        }
        return f[n][m];
    }
};
```

* [sol2-Go]

```go
func minDistance(s, t string) int {
    n, m := len(s), len(t)
    f := make([][]int, n+1)
    for i := range f {
        f[i] = make([]int, m+1)
    }
    for j := 1; j <= m; j++ {
        f[0][j] = j
    }
    for i, x := range s {
        f[i+1][0] = i + 1
        for j, y := range t {
            if x == y {
                f[i+1][j+1] = f[i][j]
            } else {
                f[i+1][j+1] = min(min(f[i][j+1], f[i+1][j]), f[i][j]) + 1
            }
        }
    }
    return f[n][m]
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。
- 空间复杂度：$O(nm)$。

# 三 · 空间优化：两个数组（滚动数组）

* [sol3-Python3]

```py
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        n, m = len(s), len(t)
        f = [list(range(m + 1)), [0] * (m + 1)]
        for i, x in enumerate(s):
            f[(i + 1) % 2][0] = i + 1
            for j, y in enumerate(t):
                f[(i + 1) % 2][j + 1] = f[i % 2][j] if x == y else \
                                        min(f[i % 2][j + 1], f[(i + 1) % 2][j], f[i % 2][j]) + 1
        return f[n % 2][m]
```

* [sol3-Java]

```java
class Solution {
    public int minDistance(String text1, String text2) {
        char[] s = text1.toCharArray(), t = text2.toCharArray();
        int n = s.length, m = t.length;
        int[][] f = new int[2][m + 1];
        for (int j = 1; j <= m; j++) f[0][j] = j;
        for (int i = 0; i < n; ++i) {
            f[(i + 1) % 2][0] = i + 1;
            for (int j = 0; j < m; ++j)
                f[(i + 1) % 2][j + 1] = s[i] == t[j] ? f[i % 2][j] :
                        Math.min(Math.min(f[i % 2][j + 1], f[(i + 1) % 2][j]), f[i % 2][j]) + 1;
        }
        return f[n % 2][m];
    }
}
```

* [sol3-C++]

```cpp
class Solution {
public:
    int minDistance(string s, string t) {
        int n = s.length(), m = t.length(), f[2][m + 1];
        for (int j = 0; j <= m; ++j) f[0][j] = j;
        for (int i = 0; i < n; ++i) {
            f[(i + 1) % 2][0] = i + 1;
            for (int j = 0; j < m; ++j)
                f[(i + 1) % 2][j + 1] = s[i] == t[j] ? f[i % 2][j] :
                                        min(min(f[i % 2][j + 1], f[(i + 1) % 2][j]), f[i % 2][j]) + 1;
        }
        return f[n % 2][m];
    }
};
```

* [sol3-Go]

```go
func minDistance(s, t string) int {
    n, m := len(s), len(t)
    f := [2][]int{make([]int, m+1), make([]int, m+1)}
    for j := 1; j <= m; j++ {
        f[0][j] = j
    }
    for i, x := range s {
        f[(i+1)%2][0] = i + 1
        for j, y := range t {
            if x == y {
                f[(i+1)%2][j+1] = f[i%2][j]
            } else {
                f[(i+1)%2][j+1] = min(min(f[i%2][j+1], f[(i+1)%2][j]), f[i%2][j]) + 1
            }
        }
    }
    return f[n%2][m]
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。
- 空间复杂度：$O(m)$。

# 四 · 空间优化：一个数组

* [sol4-Python3]

```py
class Solution:
    def minDistance(self, s: str, t: str) -> int:
        f = list(range(len(t) + 1))
        for x in s:
            pre = f[0]
            f[0] += 1
            for j, y in enumerate(t):
                tmp = f[j + 1]
                f[j + 1] = pre if x == y else min(f[j + 1], f[j], pre) + 1
                pre = tmp
        return f[-1]
```

* [sol4-Java]

```java
class Solution {
    public int minDistance(String text1, String text2) {
        char[] t = text2.toCharArray();
        int m = t.length;
        int[] f = new int[m + 1];
        for (int j = 1; j <= m; j++) f[j] = j;
        for (char x : text1.toCharArray()) {
            int pre = f[0];
            ++f[0];
            for (int j = 0; j < m; ++j) {
                int tmp = f[j + 1];
                f[j + 1] = x == t[j] ? pre : Math.min(Math.min(f[j + 1], f[j]), pre) + 1;
                pre = tmp;
            }
        }
        return f[m];
    }
}
```

* [sol4-C++]

```cpp
class Solution {
public:
    int minDistance(string s, string t) {
        int m = t.length(), f[m + 1];
        iota(f, f + m + 1, 0);
        for (char x : s) {
            int pre = f[0];
            ++f[0];
            for (int j = 0; j < m; ++j) {
                int tmp = f[j + 1];
                f[j + 1] = x == t[j] ? pre : min(min(f[j + 1], f[j]), pre) + 1;
                pre = tmp;
            }
        }
        return f[m];
    }
};
```

* [sol4-Go]

```go
func minDistance(s, t string) int {
    m := len(t)
    f := make([]int, m+1)
    for j := 1; j <= m; j++ {
        f[j] = j
    }
    for _, x := range s {
        pre := f[0]
        f[0]++
        for j, y := range t {
            if x == y {
                f[j+1], pre = pre, f[j+1]
            } else {
                f[j+1], pre = min(min(f[j+1], f[j]), pre)+1, f[j+1]
            }
        }
    }
    return f[m]
}

func min(a, b int) int { if b < a { return b }; return a }
```

### 复杂度分析

- 时间复杂度：$O(nm)$，其中 $n$ 为 $s$ 的长度，$m$ 为 $t$ 的长度。
- 空间复杂度：$O(m)$。

