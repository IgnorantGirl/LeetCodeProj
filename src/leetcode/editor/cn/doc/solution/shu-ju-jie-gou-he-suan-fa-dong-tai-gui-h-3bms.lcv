### 1，动态规划解决

这题让求一个字符串中有多少个**回文子串**，子串必须是连续的，子序列可以不连续，这题可以使用动态规划来解决。

<br> </br>

**定义dp[i][j]：表示字符串s从下标i到j是否是回文串**，如果```dp[i][j]```是```true```，则表示是回文串，否则不是回文串。

<br> </br>

如果要计算```dp[i][j]```，首先要判断```s.charAt(i)==s.charAt(j)```是否成立。

**1，如果s.charAt(i)!=s.charAt(j)**，那么```dp[i][j]```肯定不能构成回文串。如下图所示

![image.png](https://pic.leetcode-cn.com/1618880422-BMGPJa-image.png)

**2，如果s.charAt(i)==s.charAt(j)**，我们还需要判断```dp[i+1][j-1]```是否是回文串，如下图所示。

![image.png](https://pic.leetcode-cn.com/1618880430-cLnzFF-image.png)

实际上如果```i```和j离的非常近的时候，比如```j-i<=2```，我们也可以认为```dp[i][j]```是回文子串，如下图所示

![image.png](https://pic.leetcode-cn.com/1618880440-FrOADq-image.png)

搞懂了上面的分析过程，递推公式就呼之欲出了。

* java

```java
if (s.charAt(i) != s.charAt(j))
    continue;
dp[i][j] = j - i <= 2 || dp[i + 1][j - 1];
```

代码我们大致也能写出来了，因为是从```i```到```j```，所以```j```不能小于```i```。

* java

```java
for (int i = 0; i < length; i--) {
    for (int j = i; j < length; j++) {
        if (s.charAt(i) != s.charAt(j))
            continue;
        dp[i][j] = j - i <= 2 || dp[i + 1][j - 1];
    }
}
```

但是这里有个问题，如果我们想要求```dp[i][j]```还需要知道```dp[i+1][j-1]```，如下图所示

![image.png](https://pic.leetcode-cn.com/1618880504-suNCcB-image.png)

对于这个二维数组，如果从上往下遍历当计算```dp[i][j]```的时候，我们还没有计算```dp[i+1][j-1]```的值，所以这个时候是没法计算```dp[i][j]```的，但我们可以从下往上计算，如下所示

* java

```java
//从下往上计算
for (int i = length - 1; i >= 0; i--) {
    for (int j = i; j < length; j++) {
        if (s.charAt(i) != s.charAt(j))
            continue;
        dp[i][j] = j - i <= 2 || dp[i + 1][j - 1];
    }
}
```

我们来看下最终代码

* java

```java
public int countSubstrings(String s) {
    int length = s.length();
    boolean[][] dp = new boolean[length][length];
    int count = 0;//回文串的数量
    //字符串从后往前判断
    for (int i = length - 1; i >= 0; i--) {
        for (int j = i; j < length; j++) {
            //如果i和j指向的字符不一样，那么dp[i][j]就
            //不能构成回文字符串
            if (s.charAt(i) != s.charAt(j))
                continue;
            dp[i][j] = j - i <= 2 || dp[i + 1][j - 1];
            //如果从i到j能构成回文串，count就加1
            if (dp[i][j])
                count++;
        }
    }
    return count;
}
```

我们来看一下他的计算过程，如下图所示，红色箭头表示的是**右上角的值依赖左下角的值**，这里只画了部分，没画完。黄色表示的是计算的顺序，他是从**右下角开始**，从下往上，从左往右开始计算的，所以当计算```dp[i][j]```的时候，```dp[i+1][j-1]```已经计算过了（图中灰色部分是```i>j```，属于无效的）

![image.png](https://pic.leetcode-cn.com/1618880556-OeuKEj-image.png)

除了上面这种方式以外，我们还可以从左往右，从上往下开始计算，这样也能保证在计算```dp[i][j]```的时候，```dp[i+1][j-1]```已经计算过了，如下图所示

![image.png](https://pic.leetcode-cn.com/1618880567-KpUPHx-image.png)

来看下代码

* java

```java
public int countSubstrings(String s) {
    int length = s.length();
    boolean[][] dp = new boolean[length][length];
    int count = 0;//回文串的数量
    for (int j = 0; j < length; j++) {
        for (int i = 0; i <= j; i++) {
            //如果i和j指向的字符不一样，那么dp[i][j]就
            //不能构成回文字符串
            if (s.charAt(i) != s.charAt(j))
                continue;
            dp[i][j] = j - i <= 2 || dp[i + 1][j - 1];
            //如果从i到j能构成回文串，count就加1
            if (dp[i][j])
                count++;
        }
    }
    return count;
}
```

上面代码中```dp```是二维数组，但实际上在计算当前列的时候（如上图所示），我们只会用到上一列的结果，再往之前的就用不到了，所以我们还可以在优化一下，把二维数组改为一维。

* java

```java
public int countSubstrings(String s) {
    int length = s.length();
    boolean[] dp = new boolean[length];
    int count = 0;//回文串的数量
    for (int j = 0; j < length; j++) {
        for (int i = 0; i <= j; i++) {
            if (s.charAt(i) == s.charAt(j) && (j - i <= 2 || dp[i + 1])) {
                dp[i] = true;
                count++;
            } else {
                dp[i] = false;
            }
        }
    }
    return count;
}
```

<br> </br>

### 2，中心扩散法解决

中心扩散的思想，是找到一个字符作为回文字符串的中心，往两边扩散，来看个视频

![leet0647-1.mp4](https://leetcode.cn/problems/palindromic-substrings/solution/shu-ju-jie-gou-he-suan-fa-dong-tai-gui-h-3bms/2effcba8-10d7-4520-86c4-c7c5893e9da5)

实际上回文串的字符**不一定都是奇数个**，还有可能是下面这样，所以我们计算的时候不光要考虑**奇数**的情况，还要考虑**偶数**的情况

![image.png](https://pic.leetcode-cn.com/1618880696-OLkxww-image.png)

来看下代码。

* java

```java
//回文串的数量
int count = 0;

public int countSubstrings(String s) {
    //边界条件判断
    if (s == null || s.length() == 0)
        return 0;

    for (int i = 0; i < s.length(); i++) {
        //回文的长度是奇数
        extendPalindrome(s, i, i);
        //回文是长度是偶数
        extendPalindrome(s, i, i + 1);
    }
    return count;
}

//以left和right为中心点，求回文字符串的数量
private void extendPalindrome(String s, int left, int right) {
    while (left >= 0 && right < s.length() && s.charAt(left--) == s.charAt(right++)) {
        count++;
    }
}
```

还可以把上面的代码合并一下，如果回文串是奇数，我们把回文串中心的那个字符叫做**中心点**，如果回文串是偶数我们就把中间的那两个字符叫做中心点。

<br> </br>

对于一个长度为```n```的字符串，我们可以用它的任意一个字符当做中心点，所以中心点的个数是```n```。我们还可以用它任意挨着的两个字符当做中心点，所以中心点是```n-1```，总的中心点就是```2*n-1```。

<br> </br>

然后以这```2*n-1```个中心点为起点，往左右两边查找回文串，来看下代码。

* java

```java
//中心点的个数
public int countSubstrings(String s) {
    //字符串的长度
    int length = s.length();
    //中心点的个数
    int size = 2 * length - 1;
    //回文串的个数
    int count = 0;
    for (int i = 0; i < size; ++i) {
        //要么left等于right，要么left+1等于right。也就是说如果left等于
        //right，那么中心点就是一个字符，如果left+1等于right，中心点就是
        //2个字符
        int left = i / 2;
        int right = left + i % 2;

        while (left >= 0 && right < length && s.charAt(left--) == s.charAt(right++))
            ++count;
    }
    return count;
}
```

<br> </br>

我把部分**算法题**整理成了PDF文档，截止目前总共有**900多页**，大家可以下载阅读
**链接**：https://pan.baidu.com/s/1hjwK0ZeRxYGB8lIkbKuQgQ
**提取码**：6666

#### 如果觉得有用就给个赞吧，还可以关注我的[LeetCode主页](https://leetcode-cn.com/u/sdwwld/)查看更多的详细题解

