> Problem: [72. 编辑距离](https://leetcode.cn/problems/edit-distance/description/)

[TOC]

# 思路

详见代码注释。

# Code

* []

```Python
class Solution:
    def minDistance(self, word1: str, word2: str) -> int:
        l1 = len(word1)
        l2 = len(word2)

        # 初始化dp，dp[i][j]表示从word1[:i]到word2[:j]所需要转换的次数
        dp = [[0]*(l2+1) for _ in range(l1+1)]

        # 此时word2为空，则word1需要转换的次数为此时的长度
        for i in range(l1+1):
            dp[i][0] = i
        # 此时word2为空，则word1需要转换的次数为此时的长度
        for j in range(l2+1):
            dp[0][j] = j
        
        # 首先判断i和j索引处的字符是否相同，如果相同，则dp[i][j]=dp[i-1][j-1]
        # 否则不管是删除还是替换，都会在之前的基础上改变一位字符，
        # 则dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
        for i in range(1,l1+1):
            for j in range(1,l2+1):
                if word1[i-1] == word2[j-1]:
                    dp[i][j] = dp[i-1][j-1]
                else:
                    dp[i][j]=min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1
        return dp[-1][-1]
```

