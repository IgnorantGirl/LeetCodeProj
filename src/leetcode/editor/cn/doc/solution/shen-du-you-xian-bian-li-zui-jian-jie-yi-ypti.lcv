分享题解，分享喜欢，点击右上角【+关注TA】，给个关注呗！

### 思路

**(dfs)**  $O(C_{2n}^{n})$

首先我们需要知道一个结论，一个合法的括号序列需要满足两个条件：

- 1、左右括号数量相等
- 2、任意前缀中左括号数量 `>=` 右括号数量  （也就是说每一个右括号总能找到相匹配的左括号）

![](https://pic.leetcode-cn.com/1629079708-PPqosl-file_1629079708192)

题目要求我们生成`n`对的合法括号序列组合，因此可以考虑使用深度优先搜索，将搜索顺序定义为枚举序列的每一位填什么，那么最终的答案一定是由`n`个左括号和`n`个右括号组成。

**如何设计`dfs`搜索函数？**

最关键的问题在于搜索序列的当前位时，是选择填写左括号，还是选择填写右括号 ？因为我们已经知道一个合法的括号序列，任意前缀中左括号数量一定 `>=` 右括号数量，因此，如果左括号数量不大于 `n`，我们就可以放一个左括号，来等待一个右括号来匹配 。如果右括号数量小于左括号的数量，我们就可以放一个右括号，来使一个右括号和一个左括号相匹配。这样我们就定义好了一个搜索规则。

**递归搜索树如下：**

![](https://pic.leetcode-cn.com/1629079708-JcRINT-file_1629079708199)

**递归函数设计**

* c++

```c++
void dfs(int n ,int lc, int rc ,string str)
```

`n`是括号对数，`lc`是左括号数量，`rc`是右括号数量，`str`是当前维护的合法括号序列。

**搜索过程如下：**

- 1、初始时定义序列的左括号数量`lc` 和右括号数量`rc`都为`0`。
- 2、如果 `lc < n`，左括号的个数小于`n`，则在当前序列`str`后拼接左括号。
- 3、如果 `rc < n && lc > rc` , 右括号的个数小于左括号的个数，则在当前序列`str`后拼接右括号。
- 4、当`lc == n && rc == n` 时，将当前合法序列`str`加入答案数组`res`中。

**时间复杂度分析：** 经典的卡特兰数问题，因此时间复杂度为  $O(\frac{1}{n+1}C_{2n}^{n}) = O(C_{2n}^n)$ 。

### 代码

* []

```C++
class Solution {
public:
    vector<string> res; //记录答案 
    vector<string> generateParenthesis(int n) {
        dfs(n , 0 , 0, "");
        return res;
    }
    void dfs(int n ,int lc, int rc ,string str)
    {
        if( lc == n && rc == n) res.push_back(str);    //递归边界
        else
        {
            if(lc < n) dfs(n, lc + 1, rc, str + "(");            //拼接左括号
            if(rc < n && lc > rc) dfs(n, lc, rc + 1, str + ")"); //拼接右括号
        }
    }
};
```

* []

```Java
class Solution {
    static List<String> res = new ArrayList<String>();  //记录答案 

    public List<String> generateParenthesis(int n) {
        res.clear();
        dfs(n, 0, 0, "");
        return res;
    }
    public void dfs(int n ,int lc, int rc ,String str)
    {
        if( lc == n && rc == n) res.add(str);   //递归边界
        else
        {
            if(lc < n) dfs(n, lc + 1, rc, str + "(");            //拼接左括号
            if(rc < n && lc > rc) dfs(n, lc, rc + 1, str + ")"); //拼接右括号
        }
    }
}
```

* []

```GO
var res []string

func generateParenthesis(n int) []string {
    res = make([]string, 0)
    dfs(n, 0, 0, "")
    return res
}

func dfs(n int, lc int, rc int, path string) {
    if lc == n && rc == n {
        res = append(res, path)
        return 
    } else {
        if lc < n {
            dfs(n, lc + 1, rc, path + "(")
        } 
        if rc < lc {
            dfs(n, lc, rc + 1, path + ")")
        }
    }
    
}
```

![在这里插入图片描述](https://pic.leetcode-cn.com/1629079708-CweVVJ-file_1629079708195)
