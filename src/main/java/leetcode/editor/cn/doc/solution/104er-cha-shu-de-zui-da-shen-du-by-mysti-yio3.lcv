> Problem: [104. 二叉树的最大深度](https://leetcode.cn/problems/maximum-depth-of-binary-tree/description/)

[TOC]

# 思路

> 递归，返回左右子树深度的最大值+1

# 解题方法

> 描述你的解题方法

# 复杂度

时间复杂度:

> 添加时间复杂度, 示例： $O(n)$

空间复杂度:

> 添加空间复杂度, 示例： $O(n)$

# Code

* []

```C++
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {//递归
public:
    int helper(TreeNode*root){
        if(root==nullptr){
            return 0;
        }
        int leftdepth=helper(root->left);
        int rightdepth=helper(root->right);
        if(leftdepth>rightdepth){
            return leftdepth+1;
        }else{
            return rightdepth+1;
        }
    }
    int maxDepth(TreeNode* root) {
        return helper(root);
    }
};
```

