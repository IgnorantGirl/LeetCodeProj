# 解题思路

看了大神们写的运用了位运算的动态规划代码，我感到很敬佩。因为我自己用了另一种方法，稍微麻烦些。

在这里记录一下我在做题时想到的另一种动态规划方法。

先列几个数，找下规律：

![1.jpg](https://pic.leetcode-cn.com/1614765331-ETXyTS-1.jpg)

很容易发现，当i为2的幂次方时（1，2，4，8...），1的数目只有1个。而为其他数时（0除外），设小于该数的所有**2的幂次方的数中最大的那个**是a，则这个数1的数目为（i - a）的1的数目 + 1。

举例，对于7这个数，小于它的所有**2的幂次方的数中最大的那个**就是4。7 - 4 = 3，所以，它的1的个数就是**3的1的个数 + 1 = 2 + 1 = 3**。

在遍历过程中，用flag记录当前小于i的所有**2的幂次方的数中最大的那个**数，遍历到新的2的幂次方数，再更新就可以。

# 代码

* 

```
class Solution {
public:
    vector<int> countBits(int num) {
        vector<int> res(num + 1);
        res[0] = 0;
        int powNum = 1;
        int flag = 1;
        for(int i = 1; i <= num; i++)
        {
            if(i == powNum)
            {
                flag = powNum;
                powNum *= 2;
                res[i] = 1;
            }
            else
            {
                res[i] = 1 + res[i - flag];
            }
        }
        return res;
    }
};
```

- 时间复杂度：O(n)
- 空间复杂度：O(n)

