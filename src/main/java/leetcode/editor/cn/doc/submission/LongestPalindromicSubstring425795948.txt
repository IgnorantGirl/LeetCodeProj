class Solution {
    public String longestPalindrome(String s) {
       int len = s.length();
       if(len<2)
          return s;
       boolean[][] dp = new boolean[len][len];
       for(int i=0;i<len;i++){
           dp[i][i] = true;
       }   
       char[] chars = s.toCharArray();
       int maxLen = 1;
       int start = 0;
       //子串长度进行遍历
       for(int L = 2;L<=len;L++){
           for(int i=0;i<len ;i++){
              // 右边  长度 L = j-i+1
              int j = L+i-1;
              if(j>=len){
                  break;
              }
              if(chars[i]!=chars[j]){
                  dp[i][j]=false;
              }else{
                 if(j-i <3){
                  dp[i][j] = true;
                 }else{
                     dp[i][j] = dp[i+1][j-1];
                 }
              }
              if(dp[i][j]&&L>maxLen){
                  maxLen = L;
                  start = i;
              }
           }
       }
       return s.substring(start,start+maxLen);
    }
}
//runtime:113 ms
//memory:44.7 MB
