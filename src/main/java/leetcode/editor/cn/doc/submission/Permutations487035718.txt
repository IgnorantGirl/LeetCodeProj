class Solution {
    public List<List<Integer>> permute(int[] nums) {
        int len = nums.length;
        List<List<Integer>> res= new ArrayList<>();
        if(len == 0){
            return res;
        }
        boolean[] used = new boolean[len];
        List<Integer> path = new ArrayList<>();
        dfs(nums, 0, len, used, path, res);
        return res;
    }

    public void dfs(int[] nums, int depth, int len, boolean[] used, List<Integer> path, List<List<Integer>> res){
        if(depth == len){
            res.add(new ArrayList<>(path));
            return;
        }
        for(int i=0;i<len;i++){
            if(!used[i]){
                path.add(nums[i]);
                used[i] = true;
                dfs(nums,depth+1,len,used,path,res);
                used[i] = false;
                path.remove(path.size()-1);
            }
        }
    }
}
//runtime:0 ms
//memory:42.9 MB
