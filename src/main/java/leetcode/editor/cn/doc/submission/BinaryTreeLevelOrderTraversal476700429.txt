/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    List<List<Integer>> res = new ArrayList<>();
    public List<List<Integer>> levelOrder1(TreeNode root) {
        if(root == null) return res;
        pretrasvel(root,0);
        return res;
    }

    public void pretrasvel(TreeNode node, int level){
        if(node == null) return;
        if(res.size() == level){
            res.add(new ArrayList<Integer>());
        }
        res.get(level).add(node.val);
        pretrasvel(node.left,level+1);
        pretrasvel(node.right,level+1);
    }

    // 非递归
    public List<List<Integer>> levelOrder(TreeNode root) {
        if(root == null) return res;
        Queue<TreeNode> queue = new LinkedList<>();
        queue.add(root);
        while(!queue.isEmpty()){
            int currentNums = queue.size();
            ArrayList<Integer> list = new ArrayList<>();
            for(int i = 0;i<currentNums;i++){
                TreeNode node = queue.poll();
                list.add(node.val);
                if(node.left!=null) queue.add(node.left);
                if(node.right!=null) queue.add(node.right);
            }
            res.add(list);
        }
        return res;
    }
}
//runtime:1 ms
//memory:42.8 MB
